package integers

import (
	"fmt"
	"testing"
)

func TestAdder(t *testing.T) {
	sum := Add(2, 3)
	expected := 5

	if sum != expected {
		t.Errorf("expected '%d' but got '%d'", expected, sum)
	}
}

// NOTE
// - `%d` for integers, `%s` for strings

func ExampleAdd() {
	sum := Add(123, 456)
	fmt.Println(sum)
	// Output: 5791
}

// NOTE
// - When the func name begins with `Example`, and contains a comment `// Output: `
//   this is used to generate a special type of test case which is included within the documentation
//   that is generated by godoc.
//   - This is desirable because you don't want exampels in your docs that are out of date, thus
//     having executable examples that get run as parts of your tests is a means to prevent this
//     type of regression
// - run `go test -v` - the `-v` flag tell it to output the test verbosely, so that you can see that
//   the example does indeed execute
// - make sure that your project is located within `$GOPATH` using the convention, for example this
//   project is at `${GOPATH}/src/github.com/bguiz/bguiz-learns-go`
//   - if not `mv` it
//   - then run `godoc -http=:9111` and open `http://localhost:9111/pkg/`
//   - you should see your project appear under "Third Part", and click on them to navigate to the
//     go docs for each package
//   - e.g. this one is at
//     http://localhost:9111/pkg/github.com/bguiz/bguiz-learns-go/03-learn-go-with-tests/01-go-fundamentals/02-integers/
//   - you should also see the example with both code and output (starts off initially collapsed)

/*
What a failing example looks like (changed the expected value)

--- FAIL: ExampleAdd (0.00s)
got:
579
want:
5791
FAIL
*/
